
#Submission for group 17
#Kaustubh Hiware 14CS30011  
#Rameshwar Bhaskaran 14CS30027
.data
	prompt: .asciiz "Enter three positive integers s, m and n:  "
	printadd: .asciiz "The added matrix is : "
	printstr: .asciiz "The matrix is : "
	space: .asciiz " "
	newline: .asciiz "\n"
.text
.globl main

main: 
	li $v0 , 4       		 # loads the value 4 into register $v0 which is the code for print string
	la $a0 , prompt    		 # load address prompt from memory and store it into arguement register 0
	syscall            		 # reads register $v0 for op code, sees 4 and prints the string located in $a0
    
	li $v0 , 5         		 # load memory for input
	syscall            		 # ask for input s
	move $t0, $v0		 	# t0 now stores s
    
	li $v0 , 5         		 # load memory for input
	syscall            		 # ask for input m
	move $t1, $v0		 	# t1 now stores m
    
	li $v0 , 5         		 # load memory for input
	syscall            		 # ask for input n
	move $t2, $v0		 	# t2 now stores n
    
    	move $t3, $t1			#t3 will have m*n - now it is m
    	
    	li $v0, 4
	la $a0, printstr
	syscall
	
	 li $v0, 1
	 move $a0, $t3
	 syscall
	 li $v0, 4
	 la $a0, newline
	 syscall 
	 
    	
    	mult $t3, $t2			#mutliply m by n
  	mfhi $a2 # 32 most significant bits of multiplication to $a2
  	mflo $v0 # 32 least significant bits of multiplication to $v0  
  	move $t3, $v0  	
    		li $v0, 4
	la $a0, printadd
	syscall
	
	 li $v0, 1
	 move $a0, $t3
	 syscall
	 li $v0, 4
	 la $a0, newline
	 syscall 
	#move $t0, $v0		 # create a local copy for printing the number
   	#la $t1, ($t0)		# keep a copy of n  =>   $t1 is n
   	#sll $t0,$t0,2		# multiply by four for memory
	
#	move $fp, $sp		# keep a safe copy
#	add $sp, $sp , $t0	# dynamically allocate memory to stack pointer

    
    
just_print:
	li $v0, 5
	la $a0, printstr
	syscall
	
	 li $v0, 1
	 move $a0, $t3
	 syscall
	 li $v0, 5
	 la $a0, newline
	 syscall 
    
    
    
    
    
 jr $ra
