
#Submission for group 17
#Kaustubh Hiware 14CS30011  
#Rameshwar Bhaskaran 14CS30027

.data

	prompt:   .asciiz "Enter three positive integers s, m and n: "
	newline:   .asciiz "\n"
	space:   .asciiz " "
	matrixAstr:   .asciiz "Generated Matrix A : "
	matrixBstr:   .asciiz "Generated Matrix B : "
	matrixCstr:   .asciiz "Sum of matrix A and B is C: \n"

.text
.globl main

main:	
	li $v0 , 4       		 # loads the value 4 into register $v0 which is the code for print string
	la $a0 , prompt    		 # load address prompt from memory and store it into arguement register 0
	syscall            		 # reads register $v0 for op code, sees 4 and prints the string located in $a0
    
	li $v0 , 5         		 # load memory for input
	syscall            		 # ask for input s
	move $t0, $v0		 	# t0 now stores s
    
	li $v0 , 5         		 # load memory for input
	syscall            		 # ask for input m
	move $t1, $v0		 	# t1 now stores m
    
	li $v0 , 5         		 # load memory for input
	syscall            		 # ask for input n
	move $t2, $v0		 	# t2 now stores n

	move $fp,$sp			# keep a safe copy
	subu $fp,$fp,4			# next element

	li $s0,4			# allocating space for A,B and C matrices
	mulou $s1,$t2,$t1		# s1 = m*n
    	mulou $s0,$s0,$s1		# s0 = 4*m*n

	move $t6,$s0			# s6 = space for each matrix

   	subu $sp,$sp,$s0		#  address of A[0][0]
    	move $t3,$sp
    	move $t7,$t3

    	subu $sp,$sp,$s0		# address of B[0][0]
    	move $t4,$sp
    	move $t8,$t4

   	subu $sp,$sp,$s0		# address of C[0][0]
    	move $t5,$sp

 	li $s0,1			# i = 0

   	 sw $t0,0($t3)			# A[0][0] = seed
   	 addi $t3,$t3,4			# increment iterator for A

  	  addi $s1,$t0,10

  	  sw $s1,0($t4)			# B[0][0] = seed + 10
  	  addi $t4,$t4,4		# increment iterator for B

   	 mulou $t6,$t1,$t2		# t6 now stores m * n

populate:	
	beq $s0,$t6,printA_B		# if s0 == m*n, proceed to printing A and B

	lw $s1,-4($t3)			# save next element
	li $s2,330			# s2 = 7 * 47 + 1 => a
	mulou $s1,$s1,$s2

	addi $s1,$s1,100

	li $s3,2303			# s3 = 48^2 - 1 => m
	remu $s1,$s1,$s3		# s1 = s1 % s3

	sw $s1,0($t3)			# A[i] is recorded

					## Rule for populating Matrices : Xn+1 = (aXn+c) mod m
					
	lw $s1,-4($t4)			# move to the next element for computation
	li $s2,330			# s2 = 7 * 47 + 1 => a
	mulou $s1,$s1,$s2

	addi $s1,$s1,100		# add c = 100 for rule

	li $s3,2303
	remu $s1,$s1,$s3		# s1 = s1 % s3

	sw $s1,0($t4)			# B[i] is recorded

	addi $s0,$s0,1
	addi $t3,$t3,4
	addi $t4,$t4,4

	j populate				

printA_B:
	li $v0,4			# print matrixAstr
	la $a0,matrixAstr
	syscall

	move $a0,$t1 			# update registers to print A
	move $a1,$t2
	move $a2,$t7
	sw   $ra, -4($sp)  

   	 jal printMat			

   	 li $v0,4 			# print newline
	la $a0,newline
	syscall

	li $v0,4			# print matrixBstr
	la $a0,matrixBstr
	syscall

   	 move $a0,$t1 			# update registers to print B
	move $a1,$t2
	move $a2,$t8
	sw   $ra, -4($sp)  

    	jal printMat			

	move $a0,$t6 			#arguements storing for addMat for C
	move $a1,$t7
	move $a2,$t8
	move $a3,$t5
	sw   $ra, -4($sp)

	jal addMat			# adding matrices A and B , saving it at C

	li $v0,4 			# print newline
	la $a0,newline
	syscall

	li $v0,4			# print matrixBstr
	la $a0,matrixCstr
	syscall

	move $a0,$t1 			# needed for printMat C
	move $a1,$t2
	move $a2,$t5
	sw   $ra, -4($sp)  

    	jal printMat			
    	
	move $sp,$fp			# recall saved value
	li $v0,10			# use to exit the program , because jr $ra isn't working 
	syscall

printMat : 				## PrintMat takes a matrix stored at $a0 of size a1 * a2
	move $s2,$a0 			# store in scratch registers for processing
	move $s3,$a1
	move $s4,$a2	
	li $s0,0 			# s0 = i = 0 for 'loopOverRow'

	li $v0,4           		# print newline
	la $a0,newline
	syscall

	j loopOverRow 			# jump to 'loopOverRow'

loopOverRow : 
	beq $s0,$s2,returnKar 		# if i = m, jump to 'returnKar'

	li $s1,0 			# j = 0 for 'addIndividual' (nested loop)
	j loopOverColumn

loopOverColumn :
	beq $s1,$s3,rowOver 		# if j = n, jump to 'rowOver'

	li $v0,4 			
	la $a0,space 
	syscall

	li $v0,1 			# printing the current value in register $t4
	lw $a0,0($s4)
	syscall

	addi $s1,$s1,1			# s1 = j++
	addi $s4,$s4,4			# go to next element
	j loopOverColumn		# continue in this row


rowOver:
	li $v0,4 			# move to next line for new row
	la $a0,newline
	syscall

	addi $s0,$s0,1 			# s0 = i ++
	j loopOverRow 			# jump to loopOverRow

returnKar :		
	jr $ra  			# what the name says


addMat :				## Take matrices a1 and a2 , sum at s3 , with a0 as index < m*n
	move $s0,$a0 			# storing in copies to change the copy
	move $s1,$a1
	move $s2,$a2
	move $s3,$a3
	j addIndividual 		# jump to addIndividual

addIndividual :
	beqz $s0,returnKar 		# return if rows exhausted
	lw $s5,0($s1)			# next element of A at s5
	lw $s6,0($s2)			# corresponding element of B at s6

	addu $s7,$s5,$s6 		# s7 = C[i] = A[i] + B[i] 

	sw $s7,0($s3) 			# store C[i] at proper location

	addi $s1,$s1,4			# next element of A
	addi $s2,$s2,4			# next element of B
	addi $s3,$s3,4			# next element of C
	subu $s0,$s0,1			# decrement looper

	j addIndividual 	
