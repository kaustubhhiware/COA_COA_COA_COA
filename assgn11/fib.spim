# Submission for Group 17
# Kaustubh Hiware 14CS30011
# Rameshwar Bhaskaran 14CS30027
# Supposed to print all fibonacci strings upto n

	.data
prompt:    .asciiz "Enter an integer m (no less than 2): "
stage_i:   .asciiz "\nS["
stage_close:   .asciiz "]:"
newline:	.asciiz "\n"
	
	.text
	.globl main
main:	li $v0 , 4       	 # loads the value 4 into register $v0 which is the code for print string
    	la $a0 , prompt    	 # load address prompt from memory and store it into arguement register 0
    	syscall          	 # reads register $v0 for op code, sees 4 and prints the string located in $a0
    	li $v0 , 5         	 # load memory for input
    	syscall            	 # ask for input n
	  
	  move $s0,$v0			# create a local copy for printing the number
	  
	  li $s1,0				# s1 = i 
	  
	  li $s2,1
	  li $s3,1
	  
fillIn :						## fillIn for Filling elements , basic iterator
	bge $s1,$s0,returnKar
	
	move $t0,$s3
	addu $s3,$s3,$s2
	move $s2,$t0
	
	addi $s1,$s1,1 				# i++ 
	
	j fillIn

returnKar:
	move $fp,$sp
	mulou $s2,$s3,4
	subu $sp,$sp,$s2
	move $s1,$sp
	
	li $t0,0
	sw $t0,0($s1)	#store 0 at start of array
	
	li $t0,1
	sw $t0,4($s1)	# a[1] = 1
	
	sub $sp,$sp,8	# start from 2nd elements
	
	move $s2,$sp 	# create a local copy
	
	li $t0,2
	sw $t0,0($s2)
	
	li $t0,1
	sw $t0,4($s2)
	
	li $a0,2 		# i = 2
	move $a1,$s0
	move $a2,$s1
	move $a3,$s2
	
	jal fibonacci
	
	j exit
	

fibonacci :
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	
	move $t0,$a0
	move $t1,$a1
	move $t2,$a2
	move $t3,$a3	# start of the array
	move $s4,$t2
	
	lw $t4,0($t3)	# load fib[n-2]
	lw $t5,4($t3)	#load fib[n-1]
	
	bgt $t0,$t1,fibDone	#	terminate if word generated
	
	move $t7,$t2	
	
	mul $s3,$t4,4		# go to ith position
	
	addu $t7,$t7,$s3
	
	li $t6,0
	
fillMain :
	bge $t6,$t4,addElement
	
	lw $s5,0($t2)		# take value at t2
	sw $s5,0($t7)		# and store in in t7
	
	addi $t7,$t7,4		# go to next 	
	addi $t2,$t2,4
	addi $t6,$t6,1
	
	j fillMain
	
addElement :
	move $t6,$t4		# create a copy of fib[n]
	addu $t4,$t5,$t4	# update fib[n+1]
	move $t5,$t6		# now , fib[n-1] symbollically = fib[n] for N = n+1
	
	sw $t4,0($t3)
	sw $t5,4($t3)
	
fibonacci_return:
	li $v0,4 								#print stage_i
	la $a0,stage_i
	syscall

	li $v0,1 								
	move $a0,$t0
	syscall

	li $v0,4 								#print stage_close
	la $a0,stage_close
	syscall
	
	li $t6,0
	move $t2,$s4
	
fillIn2 :
	bge $t6,$t4,jumpFib
	
	li $v0,1 								
	lw $a0,0($t2)
	syscall
	
	addi $t2,$t2,4
	addi $t6,$t6,1
	j fillIn2

jumpFib:							# proceed towards printing final string
	addi $t0,$t0,1
	move $a0,$t0
	move $a1,$t1
	move $a2,$s4
	move $a3,$t3
	
	jal fibonacci
	
fibDone:						# go home , you're done
	lw $ra 0($sp) 
	addi $sp,$sp,4
	jr $ra
	
	
exit : 
	move $sp,$fp	
	li $v0, 5
	la $a0, newline
	syscall			
	li $v0,10								
	syscall