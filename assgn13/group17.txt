*** GROUP 17 ***
** RAMESHWAR BHASKARAN - 14CS30027
** KAUSTUBH HIWARE - 14CS30011
*****

INSTRUCTION DESCRIPTIONS

## LOAD OPERATIONS

*> LOAD IMMEDIATE : 

Instruction : li r5, #100

MAR <- PC  (fn-transX,TPC-1,LMAR-1)
MDR <- M[MAR] (TMAR-1,RD-1,LMAR-1,RMARX-1)
IR[rb1] <- MDR (fn-transX,L IR[rb1]-1,TMDR-1)
PC <- PC+2 (r1-PC,r2-2) (r1-PC,r2-2)


*> LOAD REGISTER : 

Instruction : lr r5, r7

IR[rb1] <- IR[rb2] (fn-transX,L IR[rb1] - 1, T IR[rb1]-1 )
	
	
*> LOAD (BASE INDEXED) : 

Instruction: lx r5, 10(r1,r7)

AR <- PC (fn-transX,LMAR-1,TPC-1)(fn-transX,LMAR-1,TPC-1)
MDR <- M[MAR] (TMAR-1,RD-1,LMAR-1,RMARX-1)	
MDR <- MDR + IR[rb2] (r1-MDR,r2-IR[rb2])
MAR <- MDR + IR[rx2] (r1-MAR,r1-MDR,r2-IR[rx2])
MDR <- M[MAR] (TMAR-1,RD-1,LMAR-1,RMARX-1)
IR[rb1] <- MDR (fn-transX,TMDR-1,L IR[rb1] - 1)
PC <- PC+2 (r1-PC,r2-2)	
	
*> LOAD INDIRECT :

Instruction : ldn r5, @10(r1, r7)

MAR <- PC
(fn-transX,LMAR-1,TPC-1)MDR <- M[MAR] (TMAR-1,RD-1,LMAR-1,RMARX-1)	
MDR <- MDR + IR[rb2] (r1-MDR,r2-IR[rb2])
MAR <- MDR + IR[rx2] (r1-MAR,r1-MDR,r2-IR[rx2])
MDR <- M[MAR] (TMAR-1,RD-1,LMAR-1,RMARX-1)MAR <- MDR
MDR <- M[MAR] (TMAR-1,RD-1,LMAR-1,RMARX-1)IR[rb1] <- MDR
PC <- PC+2 (r1-PC,r2-2)


*> STORE BASED ADDRESSING :

Instruction : stx -5(r2), r3

MAR <- PC (fn-transX,LMAR-1,TPC-1)
MDR <- M[MAR] (TMAR-1,RD-1,LMAR-1,RMARX-1)
MAR <- MDR + IR[rb2] (r1-PC,r2-2)
MDR <- IR[rb1] (fn-transX, LMDR - 1, T IR[rb1] - 1)
PC <- PC+2 (r1-PC,r2-2)
	

*> STORE INDIRECT : 

Instruction : stn @-(r2), r3

MAR <- PC (fn-transX,LMAR-1,TPC-1)
MDR <- M[MAR] (TMAR-1,RD-1,LMAR-1,RMARX-1)MAR <- MDR + IR[rb2]
MDR <- M[MAR] (TMAR-1,RD-1,LMAR-1,RMARX-1)MAR <- MDR
MDR <- IR[rb1] (fn-transX,LMDR-1,T IR[rb1])
PC <- PC+2 (r1-PC,r2-2)
	
	
*> ADD (IMMEDIATE) : 

Instruction : addi r1, #43

RTI : 
    1 : MAR  <- PC

	      Z    <- PC + 2

    There is a delay of k seconds.	

   1 : MDR  <- M[MAR]
			  
   2 : IR  <- MDR
	
   3 : PC  <- Z
	
   4 : MAR  <- PC

		Z    <- PC + 2
			  

There is a delay of k seconds.
	
    4 : MDR  <- M[MAR]
	
    5 : PC  <-  Z
	
	6 : Y  <- MDR
	
	7 : Z  <- SourceRegister1 + #43
	
	8 : DestinationRegister  <-  Z
	
// ADD (BASE INDEXED)
Instruction : addx r1,10(r2,r3)

RTI:
	 1 : MAR  <- PC

                  Z    <- PC + 2
	 
There is a delay of k seconds.	
   1 :	MDR  <- M[MAR]
			  
   2 : IR  <- MDR
	
   3 : PC  <- Z
	
   4 : Y   <- SourceRegister1
	 
   5 : Z   <- Y + SourceRegister2
	
   6 : MAR <- PC
	
	There is a delay of k seconds.
    
    6:	MDR <- M[MAR]
			 
    7 : Y   <- MDR
	
    8 : Z   <- Z + Y
	
    9 : MAR <- Z

	There is a delay of k seconds.
	
    9 :  MDR <- M[MAR]

    10 : Y   <- MDR

    11 : Z   <- Y+ SourceRegister0 
	
    12 : DestinationRegister  <-  Z

    13 : Z -> PC + 2
	
    14 : PC <- Z
		
		
//ADD (REGISTER)		
Instruction addr: r1,r2

RTI:
	 1 : MAR  <- PC

	          Z    <- PC + 2

There is a delay of k seconds.	
 
   1 :	MDR  <- M[MAR]
			  
   2 : IR  <- MDR
	
   3 : PC  <- Z
		
   4 : Y   <- SourceRegister1
	 
   5 : Z   <- Y + SourceRegister0
	
   6 : DestinationRegister  <-  Z

// ADD INDIRECT
Instruction addn: r1,@10(r2,r3)

RTI:
   
	 1 : MAR <- PC

	          Z   <- PC + 2
	There is a delay of k seconds.
	
   1 : MDR <- M[MAR]
	
	2 : IR  <- MDR
	
	3 : PC  <- Z
	
	4 : Y   <- SourceRegister1
	
	5 : Z   <- Y + SourceRegister2
	
	6 : MAR <- PC
	
	There is a delay of k seconds.
	
	6 :            MDR <- M[MAR]
			 
        7 : Y   <- MDR
	
	8 : Z   <- Z + Y
	
	9 : MAR <- Z

	There is a delay of k seconds.
	
        9 :	             MDR <- M[MAR]
			  
	 10 : MAR <- MDR
		
	 11 : Z <- PC + 2
				
	There is a delay of k seconds.	
	 11 : MDR <- M[MAR]
	
        12 : PC <- Z

	 13 : Y <- MDR
   
        14 : Z <- Y + SourceRegister0
	
	 15 : DestinationRegister <- Z



//SUBTRACT
Instruction: subn r4, @-120( r2, r6)

MAB <- PC 	
MDB <- M[MAB] 	
R <- MDB 
T <- R + r2	
R <- r6
MAB <- T + R
MDB <- M[MAB] 
MAB <- MDB 
MDB <- M[MAB]
R <- r4
Ra <- R - MDB 	
PC <- PC+1 

//JUMP UNCONDITIONALLY
Instruction : j addr

MAB <- PC 	
MDB <- M[MAB] 	
PC <- MDB


//JUMP ON ZERO

Instruction : jz 400

RTI : 
    1 : MAR  <- PC

	      Z    <- PC + 2


There is a delay of k seconds.
	
   1 :	MDR  <- M[MAR]
			  
   2 : IR  <- MDR
	
   3 : PC  <- Z
	
   4 : MAR <- PC

		Z   <- PC+2


There is a delay of k seconds.
	
    4 : MDR <- M[MAR]
			
    5 : PC <-Z
		 Y <- Z

    6 : Z  <- Y + MDR
	
    7 : 
	        Pc  <- Z or PC
			


// JUMP AND LINK

Instruction : jal r1,sub

	 1 : MAR  <- PC

                  Z    <- PC + 2

There is a delay of k seconds.
	
   1 :	MDR  <- M[MAR]
			  
   2 : IR  <- MDR
	
   3 : PC  <- Z
	
   4 : MAR <- PC

		Z   <- PC+2

There is a delay of k seconds.
	
    4 : MDR <- M[MAR]
			
    5 : DestinationRegister <- Z
		 
    6 : Y <- PC

    7 : Z  <- Y + MDR
	
    8 : PC  <- Z 
			
// JUMP TO RETURN 
Instruction : jr r1

	 1 : MAR  <- PC

	      Z    <- PC + 2

There is a delay of k seconds.
	
   1 :	      MDR  <- M[MAR]
   2 : IR  <- MDR
   3 : PC  <- Z
   4 : PC <- sourceregister

