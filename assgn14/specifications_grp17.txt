*** GROUP 17 ***
** RAMESHWAR BHASKARAN - 14CS30027
** KAUSTUBH HIWARE - 14CS30011
*****

INSTRUCTION DESCRIPTIONS

## LOAD OPERATIONS

*> LOAD IMMEDIATE : 

Instruction : li r5, #100

 1 | 00x | 000 | --- | xxx | xxx
		register

MAR <- PC  (fn-transX,TPC-1,LMAR-1)
MDR <- M[MAR] (TMAR-1,RD-1,LMAR-1,RMARX-1)
IR[rb1] <- MDR (fn-transX,L IR[rb1]-1,TMDR-1)
PC <- PC+2 (r1-PC,r2-2) (r1-PC,r2-2)


*> LOAD REGISTER : 

Instruction : lr r5, r7

IR[rb1] <- IR[rb2] (fn-transX,L IR[rb1] - 1, T IR[rb1]-1 )
	
	
*> LOAD (BASE INDEXED) : 

Instruction: lx r5, 10(r1,r7)

 1 | 00x | 000 | --- | xxx | xxx
		register

AR <- PC (fn-transX,LMAR-1,TPC-1)(fn-transX,LMAR-1,TPC-1)
MDR <- M[MAR] (TMAR-1,RD-1,LMAR-1,RMARX-1)	
MDR <- MDR + IR[rb2] (r1-MDR,r2-IR[rb2])
MAR <- MDR + IR[rx2] (r1-MAR,r1-MDR,r2-IR[rx2])
MDR <- M[MAR] (TMAR-1,RD-1,LMAR-1,RMARX-1)
IR[rb1] <- MDR (fn-transX,TMDR-1,L IR[rb1] - 1)
PC <- PC+2 (r1-PC,r2-2)	
	

*> LOAD INDIRECT :

Instruction : ldn r5, @10(r1, r7)

 1 | 00x | 001 | --- | --- | ---
		reg5	reg1 reg7

MAR <- PC
(fn-transX,LMAR-1,TPC-1)MDR <- M[MAR] (TMAR-1,RD-1,LMAR-1,RMARX-1)	
MDR <- MDR + IR[rb2] (r1-MDR,r2-IR[rb2])
MAR <- MDR + IR[rx2] (r1-MAR,r1-MDR,r2-IR[rx2])
MDR <- M[MAR] (TMAR-1,RD-1,LMAR-1,RMARX-1)MAR <- MDR
MDR <- M[MAR] (TMAR-1,RD-1,LMAR-1,RMARX-1)IR[rb1] <- MDR
PC <- PC+2 (r1-PC,r2-2)


*> STORE BASED ADDRESSING :

Instruction : stx -5(r2), r3

 1 | 01x | 000 | --- | --- | xxx
		 reg2   reg3
		 
MAR <- PC (fn-transX,LMAR-1,TPC-1)
MDR <- M[MAR] (TMAR-1,RD-1,LMAR-1,RMARX-1)
MAR <- MDR + IR[rb2] (r1-PC,r2-2)
MDR <- IR[rb1] (fn-transX, LMDR - 1, T IR[rb1] - 1)
PC <- PC+2 (r1-PC,r2-2)
	

*> STORE INDIRECT : 

Instruction : stn @-(r2), r3

 1 | 01x | 001 | --- | --- | xxx
		 reg2   reg3 

MAR <- PC (fn-transX,LMAR-1,TPC-1)
MDR <- M[MAR] (TMAR-1,RD-1,LMAR-1,RMARX-1)MAR <- MDR + IR[rb2]
MDR <- M[MAR] (TMAR-1,RD-1,LMAR-1,RMARX-1)MAR <- MDR
MDR <- IR[rb1] (fn-transX,LMDR-1,T IR[rb1])
PC <- PC+2 (r1-PC,r2-2)
	
	
	
// ADD (IMMEDIATE)
Instruction : addi r1, #43

 0 | 000 | 000 | 001 | xxx | xxx
		 reg1

	16 bit displacement


MAR <- PC (fn-transX,LMAR-1,TPC-1)
MDR <- M[MAR] (TMAR-1,RD-1,LMAR-1,RMARX-1)IR[rb1] <- MDR + IR[rb1]
PC <- PC + 2 
	
	
// ADD (BASE INDEXED)
Instruction : addx r1,10(r2,r3)

0 | 010 | 010 | 001 | 111 | xxx | xxx
	16 bit displacement

MAR <- PC (fn-transX,LMAR-1,TPC-1)MDR <- M[MAR] (TMAR-1,RD-1,LMAR-1,RMARX-1)	
MDR <- MDR + IR[rb2] (r1-MDR,r2-IR[rb2])
MAR <- MDR + IR[rx2] (r1-MAR,r1-MDR,r2-IR[rx2])
Y <- r2 (Tr2-1,LYX-1)
r1 <- r1 + Y (fn-add,Tr1-1,TY-1,LDr1-1)
MDR <- M[MAR] (TMAR-1,RD-1,LMAR-1,RMARX-1)
IR[rb1] <- IR[rb1] + MDR (r1-IR[rb1], r2-MDR)
Y <- r2 (Tr2-1,LYX-1)
r1 <- r1 + Y (fn-add,Tr1-1,TY-1,LDr1-1)
PC <- PC + 2 (r1-PC,r2-2,see line 46)
		
		
//ADD (REGISTER)		
Instruction addr: r1,r2

0 | 010 | 001 | 101 | 111 | xxx | xxx
		reg5  reg7


IR[rb1] <- IR[rb1] + IR[rb2] (r1-IR[rb1],r2-IR[rb2])
Y <- r2 (Tr2-1,LYX-1)
r1 <- r1 + Y (fn-add,Tr1-1,TY-1,LDr1-1)
PC <- PC+2 

// ADD INDIRECT
Instruction addn: r1,@10(r2,r3)

0 | 010 | 011 | 001 | 111 | xxx | xxx
	16 bit displacement


MAR <- PC (fn-transX,LMAR-1,TPC-1)MDR <- M[MAR] (TMAR-1,RD-1,LMAR-1,RMARX-1)	
MDR <- MDR + IR[rb2] (r1-MDR,r2-IR[rb2])
Y <- r2 (Tr2-1,LYX-1)
r1 <- r1 + Y (fn-add,Tr1-1,TY-1,LDr1-1)
MAR <- MDR + IR[rx2] (r1-MAR,r1-MDR,r2-IR[rx2])
Y <- r2 (Tr2-1,LYX-1)
r1 <- r1 + Y (fn-add,Tr1-1,TY-1,LDr1-1)
MDR <- M[MAR] (TMAR-1,RD-1,LMAR-1,RMARX-1)
IR[rb1] <- IR[rb1] + MDR (r1-IR[rb1], r2-MDR)
Y <- r2 (Tr2-1,LYX-1)
r1 <- r1 + Y (fn-add,Tr1-1,TY-1,LDr1-1)
PC <- PC + 2 (r1-PC,r2-2)




//SUBTRACT
Instruction: subn r4, @-120( r2, r6)

 0 | 001 | 000 | 001 | xxx | xxx
		 reg1

	16 bit displacement
					 |                 																		 |
MAR <- PC (fn-transX,LMAR-1,TPC-1)
MDR <- M[MAR] (TMAR-1,RD-1,LMAR-1,RMARX-1)
IR[rb1] <- IR[rb1] - MDR (r1-IR[rb1],r2-IR[rb1])
Y <- r2 (Tr2-1,LYX-1)
r1 <- r1 - Y (fn-add,Tr1-1,TY-1,LDr1-1)
Y <- r2 (Tr2-1,LYX-1)
r1 <- r1 + Y (fn-add,Tr1-1,TY-1,LDr1-1)
PC <- PC + 2 (r1-PC,r2-2)


//JUMP UNCONDITIONALLY
Instruction : j addr


 1 | 111 | xxx | xxx | xxx | xxx

	
	16 bit address as displacement

MAR <- PC (fn-transX,LMAR-1,TPC-1)
MDR <- M[MAR] (TMAR-1,RD-1,LMAR-1,RMARX-1)
PC <- MDR (fn-transX,LPC-1,TMDR-1) 

///JUMP ON NONzero
jnz addr

 1 | 10x | 001 | 0xx | xxx | xxx

	16 bit address as displacement

MAR <- PC (fn-transX,LMAR-1,TPC-1)
MDR <- M[MAR] (TMAR-1,RD-1,LMAR-1,RMARX-1)
if Z is false
	then PC <- MDR (fn-transX,LPC-1,TMDR-1)
else PC <- PC + 2 

jc addr

  1 | 10x | 001 | 1xx | xxx | xxx

	16 bit address as displacement 

MAR <- PC (fn-transX,LMAR-1,TPC-1)
MDR <- M[MAR] (TMAR-1,RD-1,LMAR-1,RMARX-1)
if C is true 
	then PC <- MDR (fn-transX,LPC-1,TMDR-1)
else PC <- PC + 2 

//jump on non carry
jnc addr

 1 | 10x | 011 | 0xx | xxx | xxx

	16 bit address as displacement
	
MAR <- PC (fn-transX,LMAR-1,TPC-1)
MDR <- M[MAR] (TMAR-1,RD-1,LMAR-1,RMARX-1)
if C is false 
	then PC <- MDR (fn-transX,LPC-1,TMDR-1)
else PC <- PC + 2 (r1-PC,r2-2)

jv addr

 1 | 10x | 011 | 1xx | xxx | xxx

	16 bit address as displacement

MAR <- PC (fn-transX,LMAR-1,TPC-1)
MDR <- M[MAR] (TMAR-1,RD-1,LMAR-1,RMARX-1)
if V is true 
	then PC <- MDR (fn-transX,LPC-1,TMDR-1)
else PC <- PC + 2 (r1-PC,r2-2)

jnv addr

 1 | 10x | 100 | 0xx | xxx | xxx

	16 bit address as displacement
	
MAR <- PC (fn-transX,LMAR-1,TPC-1)
MDR <- M[MAR] (TMAR-1,RD-1,LMAR-1,RMARX-1)
if V is false
	then PC <- MDR (fn-transX,LPC-1,TMDR-1)
else PC <- PC + 2 (r1-PC,r2-2)

jm addr

 1 | 10x | 100 | 1xx | xxx | xxx

	16 bit address as displacement


MAR <- PC (fn-transX,LMAR-1,TPC-1)
MDR <- M[MAR] (TMAR-1,RD-1,LMAR-1,RMARX-1)
if S is true 
	then PC <- MDR (fn-transX,LPC-1,TMDR-1)
else PC <- PC + 2 (r1-PC,r2-2)

18. jnm addr

 1 | 10x | 101 | 0xx | xxx | xxx

	16 bit address as displacement

MAR <- PC (fn-transX,LMAR-1,TPC-1)
MDR <- M[MAR] (TMAR-1,RD-1,LMAR-1,RMARX-1)
if S is false 
	then PC <- MDR (fn-transX,LPC-1,TMDR-1)
else PC <- PC + 2 (r1-PC,r2-2)

//JUMP ON ZERO

Instruction : jz 400


 1 | 10x | 010 | 0xx | xxx | xxx

	16 bit address as displacement

MAR <- PC (fn-transX,LMAR-1,TPC-1)
MDR <- M[MAR] (TMAR-1,RD-1,LMAR-1,RMARX-1)
if Z is true 
	then PC <- MDR (fn-transX,LPC-1,TMDR-1)
else
    Y <- r2 (Tr2-1,LYX-1)
r1 <- r1 + Y (fn-add,Tr1-1,TY-1,LDr1-1)
 PC <- PC + 2 (r1-PC,r2-2)

// JUMP AND LINK

Instruction : jal r1,sub

 1 | 110 | xxx | xxx | xxx | xxx

	
	16 bit address as displacement

temp <- PC + 2 (r1-PC,r2-2)
Y <- r2 (Tr2-1,LYX-1)
r1 <- r1 + Y (fn-add,Tr1-1,TY-1,LDr1-1)
IR[rb1] <- temp (ra is return address register)  
MAR <- PC (fn-transX,LMAR-1,TPC-1)
MDR <- M[MAR] (TMAR-1,RD-1,LMAR-1,RMARX-1)
Y <- r2 (Tr2-1,LYX-1)
r1 <- r1 + Y (fn-add,Tr1-1,TY-1,LDr1-1)
PC <- PC + MDR  (r1-PC,r2-MDR)

//COMPLEMENT


cmpi r1, #43

0 | 101 | 000 | 001 | xxx | xxx
		 reg1
	16 bit displacement
	
temp <- IR[rb1] (fn-transX,LT-1,T IR[rb1]-1)
IR[rb1] <- NOT(temp) (fn-compl,TT-1,L IR[rb1]-1)
PC <- PC + 2 (r1-PC,r2-2)